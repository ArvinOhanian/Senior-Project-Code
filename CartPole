import gym
import random
import numpy as np
import tflearn
from tflearn.layers.core import input_data, dropout, fully_connected
from tflearn.layers.estimator import regression
from statistics import median, mean
from collections import Counter

LR = 1e-3
env = gym.make("CartPole-v0")
env.reset()
goal_steps = 500
score_requirement = 50
initial_games = 10000

def some_random_games_first():
    for episode in range(5):
        env.reset()
        for t in range(200):
            env.render()
            
            action = env.action_space.sample()
            
            
            observation, reward, done, info = env.step(action)
            if done:
                break
    env.close()
               
#some_random_games_first()

def initial_population():
    training_data = []
    scores = []
    accepted_scores = []
    for _ in range(initial_games):
        score = 0
        game_memory = []
        prev_observation = []
        for _ in range(goal_steps):
            action = random.randrange(0,2)
            observation, reward, done, info = env.step(action)
            
            
            if len(prev_observation) > 0 :
                game_memory.append([prev_observation, action])
            prev_observation = observation
            score+=reward
            if done: break

        if score >= score_requirement:
            accepted_scores.append(score)
            for data in game_memory:
                if data[1] == 1:
                    output = [0,1]
                elif data[1] == 0:
                    output = [1,0]
                    
                training_data.append([data[0], output])

        env.reset()
        scores.append(score)
        
    training_data_save = np.array(training_data)
    np.save('saved.npy',training_data_save)
    
    print('Average accepted score:',mean(accepted_scores))
    print('Median score for accepted scores:',median(accepted_scores))
    print(Counter(accepted_scores))
    
    return training_data

def neural_network_model(input_size):
    network = input_data(shape=[None, input_size, 1], name='input')
    
    network = fully_connected(network, 128, activation='relu')
    network = dropout(network, 0.8)
    
    network = fully_connected(network, 256, activation='relu')
    network = dropout(network, 0.8)
    
    network = fully_connected(network, 512, activation='relu')
    network = dropout(network, 0.8)
    
    network = fully_connected(network, 256, activation='relu')
    network = dropout(network, 0.8)
    
    network = fully_connected(network, 128, activation='relu')
    network = dropout(network, 0.8)
    
    network = fully_connected(network, 2, activation = 'softmax')
    network = regression(network, optimizer = 'adam', learning_rate=LR,
                         loss = 'categorical_crossentropy', name='targets')
    
    model = tflearn.DNN(network, tensorboard_dir = 'log')
    
    return model

def train_model(training_data, model=False):
    #i[0] is taking the value in first index of each data. This is b/c training data is
    #stored as (input data, output action) and we want input data for our training
    X = np.array([i[0] for i in training_data]).reshape(-1, len(training_data[0][0]), 1)#training_data[0][0] takes from array of arrays trainging_data
                                                                                    #[0][0] means first set from first array which is 4 since observations from env.step
                                                                                    #returns 4 values Cart Position, cart velocity, pole angle, and pole velocity
                   
    y = [i[1] for i in training_data]#for output we take index 1 of training data
    
    if not model:
        model = neural_network_model(input_size = len(X[0]))
    
    model.fit({'input':X}, {'targets':y}, n_epoch=3, snapshot_step=500, show_metric=True,
              run_id='openAI')
    
    return model

training_data = initial_population()
model = train_model(training_data)
    
scores = []
choices = []

for each_game in range(10):
    score=0
    game_memory = []
    prev_obs= []
    env.reset()
    
    for _ in range(goal_steps): #for each frame
        env.render()            #start the env
        if len(prev_obs) == 0:  #if it is our first frame we take a random action
            action = random.randrange(0,2)
        else:   #else we use the index of the max val from model.predict array
                #the predict func takes its val from prev obs after reshaping to same dim
                #as training data. Use [0] to take first obs from model.predict
            action = np.argmax(model.predict(prev_obs.reshape(-1, 4,1))[0])
        choices.append(action)#each action taken is saved to choices array
        
        #env.step takes an action using our prediction model and returns the next state of the game,
        #the reward for our action, whether we are done or not, and info about the current env.
        #we save all these to the respective var
        new_observation, reward, done, info = env.step(action)
        
        prev_obs = new_observation#our prev obs now becomes our new obs since we took a step
        game_memory.append([new_observation, action])#used for retraining since we save env
        score+= reward#add reward to our score
        if done:#break if game is over
            break
    scores.append(score)#we save each score per frame

env.close()
print('Average Score', sum(scores)/len(scores))
print('Choice 1: {}, Choice 0: {}'.format(choices.count(1)/len(choices),
                                          choices.count(0)/len(choices)))
#we print the average score as well as what the ratio of 1 and 0 decisions are vs total choices
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
